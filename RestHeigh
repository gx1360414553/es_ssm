    <!--RestHighLevelClient-->
        <!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
       <!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
       <!--xmlns:elasticsearch="http://www.pilato.fr/schema/elasticsearch"-->
       <!--xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd-->
		<!--http://www.pilato.fr/schema/elasticsearch http://www.pilato.fr/schema/elasticsearch/elasticsearch-6.0.xsd">-->


<!--<elasticsearch:rest-client id="esClient" esNodes="http://192.168.229.128:9200" />-->

<!--</beans>-->


                <dependency>
                        <groupId>org.elasticsearch.client</groupId>
                        <artifactId>elasticsearch-rest-high-level-client</artifactId>
                        <version>6.7.0</version>
                    </dependency>

                    <dependency>
                        <groupId>fr.pilato.spring</groupId>
                        <artifactId>spring-elasticsearch</artifactId>
                        <version>6.2</version>
                    </dependency>


 /**
     *
     * @param text  查询条件
     * @param isHighlight 是否高亮
     * @param pageNum 页码   从1开始
     * @param pageSize 页的大小
     * @param sortField 排序属性
     * @param order 排序顺序  true正序 false逆序
     * @param fieldNames 查询的属性
     * @return
     * @throws Exception
     */
    @Override
    public PageResult<GoodsSku> search(Object text, boolean isHighlight, Integer pageNum, Integer pageSize, String sortField, boolean order, String... fieldNames) throws Exception {
        String preTag = "<font color='#dd4b39'>";//google的色值
        String postTag = "</font>";

        //1 构建匹配条件
        QueryBuilder queryBuilder = QueryBuilders.multiMatchQuery(text, fieldNames);
        //2组合匹配条件
        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
        boolQueryBuilder.must(queryBuilder);
        //3创建查询
        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
        //只展示需要的属性
        //sourceBuilder.fetchSource(new String[]{"id","price","title","brand"},null);
        sourceBuilder.query(boolQueryBuilder);
        //默认相关度倒叙排序
//        sourceBuilder.sort(new ScoreSortBuilder().order(SortOrder.DESC));
        if (sortField != null && !"".equals(sortField)) {
            SortOrder sortOrder = SortOrder.ASC;
            if (!order) {
                sortOrder = SortOrder.DESC;
            }
            sourceBuilder.sort(new FieldSortBuilder(sortField).order(sortOrder));
        }
        //是否高亮
        if (isHighlight) {
            HighlightBuilder highlightBuilder = new HighlightBuilder();
            if (fieldNames != null && fieldNames.length > 0) {
                for (String fieldName : fieldNames) {
                    highlightBuilder.field(fieldName);
                }
                highlightBuilder.preTags(preTag).postTags(postTag);
            }
            sourceBuilder.highlighter(highlightBuilder);
        }
        if (pageNum != null && pageSize != null) {
            sourceBuilder.from((pageNum - 1) * pageSize).size(pageNum * pageSize);
        }
        //4创建搜索Request
        SearchRequest request = new SearchRequest("goods_sku_index");
        request.types("goods_sku");
        request.source(sourceBuilder);
        //5解析反馈结果
        SearchResponse response = client.search(request);

        InternalValueCount valueCount = response.getAggregations().get("count");
        SearchHits hits = response.getHits();
        BaseEntity baseEntity = new BaseEntity();
        baseEntity.setPageSize(pageSize);
        baseEntity.setTotal(Integer.valueOf(valueCount + ""));
        List<GoodsSku> list = new ArrayList<>();
        if (hits.getHits() != null && hits.getHits().length > 0){
            for (SearchHit hit : hits) {
                Map tempSource = hit.getSourceAsMap();
                System.out.println(tempSource);
                GoodsSku goodsSku = JSON.parseObject(JSON.toJSONString(tempSource), GoodsSku.class);
                //获取对应的高亮域
                Map<String, HighlightField> highlightFields = hit.getHighlightFields();
                if (isHighlight) {
                    if (fieldNames != null && fieldNames.length > 0) {
                        for (String fieldName : fieldNames) {
                            String field = highlightFields.get(fieldName).getFragments()[0].toString();
                            String setName = parSetName(fieldName);
                            Method method = GoodsSku.class.getMethod(setName, String.class);
                            method.invoke(goodsSku, field);
                        }
                    }
                }
                list.add(goodsSku);
            }
        }
        PageResult<GoodsSku> pageResult = new PageResult<>(list,baseEntity);
        return pageResult;
    }

    /**
     *
     * @param text 查询条件
     * @param fieldNames  查询的属性
     * @return
     * @throws Exception
     */
    @Override
    public PageResult<GoodsSku> search(Object text,String... fieldNames) throws Exception {
        return search(text,false,null,null,null,false,fieldNames);
    }
    @Override
    public PageResult<GoodsSku> search(Object text,Integer pageNum, Integer pageSize,String... fieldNames) throws Exception {
        return search(text,false,pageNum,pageSize,null,false,fieldNames);
    }

    @Override
    public PageResult<GoodsSku> search(Object text,Integer pageNum, Integer pageSize,String sortField,boolean order,String... fieldNames) throws Exception {
        return search(text,false,pageNum,pageSize,sortField,order,fieldNames);
    }


    /**
     * 拼接在某属性的 set方法
     *
     * @param fieldName
     * @return String
     */
    private String parSetName(String fieldName) {
        if (null == fieldName || "".equals(fieldName)) {
            return null;
        }
        while (true){
            int indexOf = fieldName.indexOf("_");
            if(indexOf < 0){
                break;
            }
            String pre = fieldName.substring(0, indexOf);
            String mid = fieldName.substring(indexOf+1, indexOf + 2).toUpperCase();
            String suf = fieldName.substring(indexOf + 2);
            fieldName = pre + mid + suf;
        }

        int startIndex = 0;
        return "set" + fieldName.substring(startIndex, startIndex + 1).toUpperCase()
                + fieldName.substring(startIndex + 1);
    }
